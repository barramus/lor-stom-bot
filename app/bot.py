import os
import re
import asyncio
import tempfile
import zipfile
from io import BytesIO
from typing import List, Optional, Tuple

from dotenv import load_dotenv
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton,
    InputMediaPhoto,
    InputMediaDocument,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand,
    CallbackQuery,
    InputFile,
)
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from telegram.error import TimedOut, BadRequest
from telegram.request import HTTPXRequest

import app.db as db
from app.utils import log

# ENV
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN or ":" not in BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –∑–∞–¥–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ –≤ .env")

LOR_TARGET_CHAT_ID = int(os.getenv("LOR_TARGET_CHAT_ID", "0"))
MAX_ZIP_MB = int(os.getenv("MAX_ZIP_MB", "47"))

# KEYBOARD
MAIN_KB = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üÜï –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")],
        [KeyboardButton("‚úçÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton("‚ÑπÔ∏è –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ")],
    ],
    resize_keyboard=True,
    one_time_keyboard=False,
    is_persistent=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
)

BTN_FILL_PROFILE_RE = re.compile(r"(?:‚úçÔ∏è\ufe0f?\s*)?–∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å$", re.IGNORECASE)
BTN_NEW_CONSULT_RE  = re.compile(r"(?:üÜï\ufe0f?\s*)?–Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é$", re.IGNORECASE)
BTN_MY_DATA_RE      = re.compile(r"(?:‚ÑπÔ∏è\ufe0f?\s*)?–º–æ–∏ –¥–∞–Ω–Ω—ã–µ$", re.IGNORECASE)

STATE_COMPLAINTS, STATE_HISTORY, STATE_PLAN, STATE_FILES, STATE_CONFIRM = range(5)
STATE_REG_NAME, STATE_REG_PHONE, STATE_REG_WORK = range(10, 13)

def build_dentist_html(dentist: dict) -> str:
    """
    –ò–º—è + –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
    - –µ—Å–ª–∏ –µ—Å—Ç—å username -> https://t.me/<username>
    - –∏–Ω–∞—á–µ             -> tg://user?id=<tg_id>  (—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –Ω–∏–∫–∞)
    """
    name = dentist.get("full_name") or "‚Äî"
    username = dentist.get("tg_username")
    tg_id = dentist.get("tg_id")

    if username:
        return f'{name} (<a href="https://t.me/{username}">@{username}</a>)'
    elif tg_id:
        return f'{name} (<a href="tg://user?id={tg_id}">–Ω–∞–ø–∏—Å–∞—Ç—å</a>)'
    else:
        return name

def build_summary_html(consult: dict, dentist: dict) -> str:
    return (
        "<b>–ó–∞—è–≤–∫–∞ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –õ–û–†</b>\n"
        f"<b>–ñ–∞–ª–æ–±—ã</b>: {consult.get('patient_complaints','‚Äî')}\n"
        f"<b>–ê–Ω–∞–º–Ω–µ–∑</b>: {consult.get('patient_history','‚Äî')}\n"
        f"<b>–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è —Ä–∞–±–æ—Ç–∞</b>: {consult.get('planned_work','‚Äî')}\n\n"
        f"<b>–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥</b>: {build_dentist_html(dentist)}\n"
        f"–¢–µ–ª.: {dentist.get('phone') or '‚Äî'}; –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã: {dentist.get('workplace') or '‚Äî'}"
        + (f"\nüí¨ –°–≤—è–∑–∞—Ç—å—Å—è: https://t.me/{dentist['tg_username']}" if dentist.get("tg_username") else "")
    )

def html_to_plain(html_text: str) -> str:
    return (
        html_text.replace("<b>", "")
        .replace("</b>", "")
        .replace('<a href="', "")
        .replace('">', " ")
        .replace("</a>", "")
    )

def short_caption(html_text: str) -> str:
    CAPTION_LIMIT = 1024
    if len(html_text) <= CAPTION_LIMIT:
        return html_text
    cut = html_text[: CAPTION_LIMIT - 20]
    cut = cut.rsplit(" ", 1)[0]
    return cut + " ‚Ä¶ (–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ 00_summary.txt)"

def build_deeplink_keyboard(dentist: dict) -> InlineKeyboardMarkup | None:
    """
    –ö–Ω–æ–ø–∫–∞ "–ù–∞–ø–∏—Å–∞—Ç—å —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É":
    - username -> https://t.me/<username>
    - –∏–Ω–∞—á–µ    -> tg://user?id=<tg_id>
    –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ username, –Ω–∏ tg_id ‚Äî –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç.
    """
    username = dentist.get("tg_username")
    tg_id = dentist.get("tg_id")

    url = None
    if username:
        url = f"https://t.me/{username}"
    elif tg_id:
        url = f"tg://user?id={tg_id}"

    if not url:
        return None

    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É", url=url)]]
    )

async def _send_as_media_groups_with_caption(
    context: ContextTypes.DEFAULT_TYPE,
    chat_id: int,
    caption_html: str,
    atts: List[dict],
    reply_markup: Optional[InlineKeyboardMarkup],
    dentist: dict,
):
    batch: List[InputMediaPhoto | InputMediaDocument] = []
    first_item_used = False

    async def flush():
        nonlocal batch
        if not batch:
            return
        to_send = batch[:10]
        del batch[:10]
        await context.bot.send_media_group(chat_id=chat_id, media=to_send)

    for a in atts:
        if a["file_type"] == "photo":
            if not first_item_used:
                batch.append(InputMediaPhoto(media=a["file_id"], caption=caption_html, parse_mode=ParseMode.HTML))
                first_item_used = True
            else:
                batch.append(InputMediaPhoto(media=a["file_id"]))
        else:
            if not first_item_used:
                batch.append(InputMediaDocument(media=a["file_id"], caption=caption_html, parse_mode=ParseMode.HTML))
                first_item_used = True
            else:
                batch.append(InputMediaDocument(media=a["file_id"]))

        if len(batch) == 10:
            await flush()

    if batch:
        await flush()

    # –û—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É/—Å—Å—ã–ª–∫—É –¥–ª—è —Å–≤—è–∑–∏
    if reply_markup:
        try:
            await context.bot.send_message(
                chat_id=chat_id,
                text="–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–æ–º:",
                reply_markup=reply_markup,
            )
        except BadRequest as e:
            if "Button_user_privacy_restricted" in str(e):
                link = (
                    f"https://t.me/{dentist.get('tg_username')}"
                    if dentist.get("tg_username")
                    else f"tg://user?id={dentist.get('tg_id')}"
                )
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–æ–º: {link}",
                    disable_web_page_preview=True,
                )
            else:
                raise

async def _build_and_send_zip(
    context: ContextTypes.DEFAULT_TYPE, chat_id: int, consult: dict, dentist: dict, atts: List[dict]
):
    html_text = build_summary_html(consult, dentist)
    plain_text = html_to_plain(html_text)
    caption_text = short_caption(html_text)
    kb = build_deeplink_keyboard(dentist)

    total_size = 0
    files_meta: List[Tuple[dict, object]] = []
    for a in atts:
        f = await context.bot.get_file(a["file_id"])
        files_meta.append((a, f))
        if getattr(f, "file_size", None):
            total_size += f.file_size

    if total_size > MAX_ZIP_MB * 1024 * 1024:
        await _send_as_media_groups_with_caption(context, chat_id, caption_text, atts, kb, dentist)
        return

    with tempfile.TemporaryDirectory() as tmp:
        summary_path = os.path.join(tmp, "00_summary.txt")
        with open(summary_path, "w", encoding="utf-8") as out:
            out.write(plain_text + "\n")

        local_paths = [summary_path]
        for i, (a, fobj) in enumerate(files_meta, 1):
            ext = ".jpg" if a["file_type"] == "photo" else ".bin"
            out_path = os.path.join(tmp, f"attachment_{i}{ext}")
            await fobj.download_to_drive(out_path, read_timeout=120.0)
            local_paths.append(out_path)

        bio = BytesIO()
        with zipfile.ZipFile(bio, "w", zipfile.ZIP_DEFLATED) as z:
            for p in local_paths:
                z.write(p, arcname=os.path.basename(p))
        bio.seek(0)

        try:
            await context.bot.send_document(
                chat_id=chat_id,
                document=InputFile(bio, filename="lor_consultation.zip"),
                caption=caption_text,
                parse_mode=ParseMode.HTML,
                read_timeout=120.0,
                reply_markup=kb,
                disable_content_type_detection=True,
            )
        except TimedOut:
            await _send_as_media_groups_with_caption(context, chat_id, caption_text, atts, kb, dentist)
        except BadRequest as e:
            # –ö–Ω–æ–ø–∫–∞ —Å tg://user?id=... –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            if "Button_user_privacy_restricted" in str(e):
                bio.seek(0)  # –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚Äî –ø–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫
                await context.bot.send_document(
                    chat_id=chat_id,
                    document=InputFile(bio, filename="lor_consultation.zip"),
                    caption=caption_text,
                    parse_mode=ParseMode.HTML,
                    read_timeout=120.0,
                    disable_content_type_detection=True,
                )
                link = (
                    f"https://t.me/{dentist.get('tg_username')}"
                    if dentist.get("tg_username")
                    else f"tg://user?id={dentist.get('tg_id')}"
                )
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–æ–º: {link}",
                    disable_web_page_preview=True,
                )
            else:
                # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî fallback –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –±–µ–∑ –∫–Ω–æ–ø–∫–∏
                await _send_as_media_groups_with_caption(context, chat_id, caption_text, atts, None, dentist)

# –ö–æ–º–∞–Ω–¥—ã/–ú–µ–Ω—é
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    assert update.message
    user = update.effective_user
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º username
    await db.upsert_dentist(user.id, tg_username=user.username)

    dentist = await db.get_dentist_by_tg_id(user.id)
    dentist.setdefault("tg_id", user.id)  # –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –Ω–∏–∫–∞
    profile_empty = not (dentist.get("full_name") or dentist.get("phone") or dentist.get("workplace"))

    if profile_empty:
        text = (
            "–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–æ–≤-—Ö–∏—Ä—É—Ä–≥–æ–≤. "
            "–û–Ω –ø–æ–º–æ–∂–µ—Ç, –µ—Å–ª–∏ –í—ã –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –∏–º–ø–ª–∞–Ω—Ç–∞—Ü–∏–∏, –≤ –ø–µ—Ä–≤–æ–º –∏ –≤—Ç–æ—Ä–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–∞ –ö–¢ —É–≤–∏–¥–µ–ª–∏ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –≤ –ø–∞–∑—É—Ö–∞—Ö, "
            "–Ω–∞–ª–∏—á–∏–µ –∏–Ω–æ—Ä–æ–¥–Ω—ã—Ö —Ç–µ–ª –∏–ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ç–æ—Ä—ã–µ –í–∞—Å —Å–º—É—â–∞—é—Ç. –í –∞–Ω–∫–µ—Ç–µ –í–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å: –∂–∞–ª–æ–±—ã, –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–º–Ω–µ–∑ –ø–∞—Ü–∏–µ–Ω—Ç–∞, "
            "–ø–ª–∞–Ω–∏—Ä—É–µ–º—É—é —Å –í–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã —Ä–∞–±–æ—Ç—É, –∞ —Ç–∞–∫ –∂–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ö–¢ —Å–∫–∞–Ω—ã –≤ –∫–æ—Ä–æ–Ω–∞—Ä–Ω–æ–π –∏ —Å–∞–≥–∏—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤–∏–¥–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è üìë\n\n"
            "–ü–æ—Ö–æ–∂–µ, –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞ –µ—â–µ –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω ‚úçüèº\n"
            "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚¨áÔ∏è"
        )
    else:
        text = (
            "–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–æ–≤-—Ö–∏—Ä—É—Ä–≥–æ–≤. "
            "–û–Ω –ø–æ–º–æ–∂–µ—Ç, –µ—Å–ª–∏ –í—ã –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –∏–º–ø–ª–∞–Ω—Ç–∞—Ü–∏–∏, –≤ –ø–µ—Ä–≤–æ–º –∏ –≤—Ç–æ—Ä–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–∞ –ö–¢ —É–≤–∏–¥–µ–ª–∏ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –≤ –ø–∞–∑—É—Ö–∞—Ö, "
            "–Ω–∞–ª–∏—á–∏–µ –∏–Ω–æ—Ä–æ–¥–Ω—ã—Ö —Ç–µ–ª –∏–ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ç–æ—Ä—ã–µ –í–∞—Å —Å–º—É—â–∞—é—Ç. –í –∞–Ω–∫–µ—Ç–µ –í–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å: –∂–∞–ª–æ–±—ã, –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–º–Ω–µ–∑ –ø–∞—Ü–∏–µ–Ω—Ç–∞, "
            "–ø–ª–∞–Ω–∏—Ä—É–µ–º—É—é —Å –í–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã —Ä–∞–±–æ—Ç—É, –∞ —Ç–∞–∫ –∂–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ö–¢ —Å–∫–∞–Ω—ã –≤ –∫–æ—Ä–æ–Ω–∞—Ä–Ω–æ–π –∏ —Å–∞–≥–∏—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤–∏–¥–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è üìë\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚¨áÔ∏è"
        )
    await update.message.reply_text(text, parse_mode=ParseMode.HTML, reply_markup=MAIN_KB)

async def cmd_me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    assert update.message
    dentist = await db.get_dentist_by_tg_id(update.effective_user.id)
    username_line = (
        f"Username: @{dentist['tg_username']}"
        if dentist.get("tg_username")
        else "Username: ‚Äî"
    )
    text = (
        "<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"–ò–º—è: {dentist.get('full_name') or '‚Äî'}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {dentist.get('phone') or '‚Äî'}\n"
        f"–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã: {dentist.get('workplace') or '‚Äî'}\n"
        f"{username_line}"
    )
    await update.message.reply_text(text, parse_mode=ParseMode.HTML, reply_markup=MAIN_KB)

async def cmd_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    assert update.message
    items = await db.list_consultations_by_dentist(update.effective_user.id)
    if not items:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.", reply_markup=MAIN_KB)
        return
    lines = []
    kb_rows = []
    for c in items[:20]:
        cid = c["id"]
        lines.append(f"#{cid} ¬∑ {c['created_at']} ¬∑ —Å—Ç–∞—Ç—É—Å: {c.get('status','‚Äî')}")
        kb_rows.append([InlineKeyboardButton(f"–û—Ç–∫—Ä—ã—Ç—å #{cid}", callback_data=f"view_consult:{cid}")])
    await update.message.reply_text("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n" + "\n".join(lines), reply_markup=InlineKeyboardMarkup(kb_rows))

async def cb_view_consult(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query: CallbackQuery = update.callback_query
    await query.answer()
    try:
        cid = int(query.data.split(":")[1])
    except Exception:
        await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
        return
    c = await db.get_consultation_by_id(cid)
    if not c:
        await query.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    txt = (
        f"<b>–ó–∞—è–≤–∫–∞ #{c['id']}</b>\n"
        f"–°—Ç–∞—Ç—É—Å: {c.get('status','‚Äî')}\n"
        f"–°–æ–∑–¥–∞–Ω–∞: {c.get('created_at','‚Äî')}\n\n"
        "–î–µ—Ç–∞–ª–∏ –∞–Ω–∫–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–µ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏; –∞—Ä—Ö–∏–≤, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –õ–û–†-–≤—Ä–∞—á—É, —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Ñ–∞–π–ª—ã."
    )
    await query.edit_message_text(txt, parse_mode=ParseMode.HTML)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ)
async def reg_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    assert update.message
    await update.message.reply_text("ü¶∑ –ó–∞–ø–æ–ª–Ω–∏–º –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞\n–í–≤–µ–¥–∏—Ç–µ –§–ò–û:", reply_markup=ReplyKeyboardRemove())
    return STATE_REG_NAME

async def reg_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    assert update.message
    context.user_data["reg_full_name"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (–≤ –ª—é–±–æ–º —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ):")
    return STATE_REG_PHONE

async def reg_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    assert update.message
    context.user_data["reg_phone"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã (–∫–ª–∏–Ω–∏–∫–∞, –≥–æ—Ä–æ–¥):")
    return STATE_REG_WORK

async def reg_work(update: Update, context: ContextTypes.DEFAULT_TYPE):
    assert update.message
    user = update.effective_user
    full_name = context.user_data.pop("reg_full_name", "").strip()
    phone = context.user_data.pop("reg_phone", "").strip()
    workplace = update.message.text.strip()
    await db.upsert_dentist(user.id, full_name=full_name, phone=phone, workplace=workplace, tg_username=user.username)
    await update.message.reply_text("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=MAIN_KB)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    assert update.message
    context.user_data.pop("edit_field", None)
    await db.clear_draft(update.effective_user.id)
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_KB)
    return ConversationHandler.END

# –û–¥–∏–Ω–æ—á–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
async def set_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    assert update.message
    context.user_data["edit_field"] = "full_name"
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–º–µ–Ω—ã):")

async def set_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    assert update.message
    context.user_data["edit_field"] = "phone"
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ª—é–±–æ–º —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–º–µ–Ω—ã):")

async def set_workplace(update: Update, context: ContextTypes.DEFAULT_TYPE):
    assert update.message
    context.user_data["edit_field"] = "workplace"
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–º–µ–Ω—ã):")

async def handle_profile_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or "edit_field" not in context.user_data:
        return
    if update.message.text and update.message.text.startswith("/"):
        context.user_data.pop("edit_field", None)
        return
    field = context.user_data.pop("edit_field")
    value = update.message.text.strip()
    user = update.effective_user
    kwargs = {field: value, "tg_username": user.username}
    await db.upsert_dentist(user.id, **kwargs)
    await update.message.reply_text(
        ("–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ." if field == "full_name"
         else "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω." if field == "phone"
         else "–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ."),
        reply_markup=MAIN_KB,
    )

async def cancel_edit_on_any_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop("edit_field", None)

# –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (–æ–ø—Ä–æ—Å)
async def new_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    assert update.message
    user = update.effective_user
    consult, atts = await db.load_draft(user.id)

    if consult and (consult.get("patient_complaints") or atts):
        context.user_data["consult"] = consult
        context.user_data["attachments"] = atts
        await update.message.reply_text(
            "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=ReplyKeyboardMarkup(
                [["‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"]],
                resize_keyboard=True,
                one_time_keyboard=True,
            ),
        )
        return STATE_CONFIRM

    context.user_data["consult"] = {}
    context.user_data["attachments"] = []
    await update.message.reply_text("1/4. –ñ–∞–ª–æ–±—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞:", reply_markup=ReplyKeyboardRemove())
    return STATE_COMPLAINTS

async def new_complaints(update: Update, context: ContextTypes.DEFAULT_TYPE):
    assert update.message
    context.user_data["consult"]["patient_complaints"] = update.message.text.strip()
    await db.save_draft(update.effective_user.id, context.user_data["consult"], context.user_data["attachments"])
    await update.message.reply_text("2/4. –ê–Ω–∞–º–Ω–µ–∑ / —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–∫—Ä–∞—Ç–∫–æ):")
    return STATE_HISTORY

async def new_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    assert update.message
    context.user_data["consult"]["patient_history"] = update.message.text.strip()
    await db.save_draft(update.effective_user.id, context.user_data["consult"], context.user_data["attachments"])
    await update.message.reply_text("3/4. –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞:")
    return STATE_PLAN

async def new_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    assert update.message
    context.user_data["consult"]["planned_work"] = update.message.text.strip()
    await db.save_draft(update.effective_user.id, context.user_data["consult"], context.user_data["attachments"])
    await update.message.reply_text(
        "4/4. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–Ω–∏–º–∫–∏/—Ñ–∞–π–ª—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=ReplyKeyboardMarkup(
            [["–ì–æ—Ç–æ–≤–æ"]],
            resize_keyboard=True,
            one_time_keyboard=False
        )
    )
    return STATE_FILES

async def new_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.photo:
        file_id = update.message.photo[-1].file_id
        context.user_data["attachments"].append({"file_id": file_id, "file_type": "photo"})
        log.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {file_id}")
    elif update.message and update.message.document:
        doc = update.message.document
        context.user_data["attachments"].append({"file_id": doc.file_id, "file_type": "document"})
        log.info(f"–î–æ–±–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {doc.file_id} ({doc.mime_type})")
    await db.save_draft(update.effective_user.id, context.user_data["consult"], context.user_data["attachments"])
    # –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    await update.message.reply_text(
        "–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª, –µ—Å–ª–∏ –≤—Å—ë –∑–∞–≥—Ä—É–∑–∏–ª–∏.",
        reply_markup=ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True)
    )
    return STATE_FILES


async def new_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    assert update.message
    user = update.effective_user
    consult = context.user_data["consult"]
    dentist = await db.get_dentist_by_tg_id(user.id)
    dentist.setdefault("tg_id", user.id)  # –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –Ω–∏–∫–∞
    atts = context.user_data["attachments"]

    preview = build_summary_html(consult, dentist) + f"\n\nüìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(atts)}"
    await update.message.reply_text(
        preview,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardMarkup(
            [["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞"], ["üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"]],
            resize_keyboard=True,
            one_time_keyboard=True,
        ),
    )
    return STATE_CONFIRM

async def new_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    assert update.message
    choice = update.message.text
    user = update.effective_user
    consult = context.user_data.get("consult", {})
    dentist = await db.get_dentist_by_tg_id(user.id)
    dentist.setdefault("tg_id", user.id)  # –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –Ω–∏–∫–∞
    atts = context.user_data.get("attachments", [])

    if choice.startswith("‚úÖ"):
        await _build_and_send_zip(context, LOR_TARGET_CHAT_ID, consult, dentist, atts)
        await db.insert_consultation_log(user.id, status="sent")
        await db.clear_draft(user.id)
        await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –õ–û–†-–≤—Ä–∞—á—É.", reply_markup=MAIN_KB)
        return ConversationHandler.END

    if choice.startswith("‚ùå"):
        await db.clear_draft(user.id)
        await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_KB)
        return ConversationHandler.END

    if choice.startswith("üîÑ"):
        await db.clear_draft(user.id)
        context.user_data["consult"] = {}
        context.user_data["attachments"] = []
        await update.message.reply_text("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ. 1/4 –ñ–∞–ª–æ–±—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞:", reply_markup=ReplyKeyboardRemove())
        return STATE_COMPLAINTS

    if choice.startswith("‚ñ∂Ô∏è"):
        await update.message.reply_text("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.", reply_markup=ReplyKeyboardRemove())
        if not consult.get("patient_history"):
            await update.message.reply_text("2/4. –ê–Ω–∞–º–Ω–µ–∑ / —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–∫—Ä–∞—Ç–∫–æ):")
            return STATE_HISTORY
        if not consult.get("planned_work"):
            await update.message.reply_text("3/4. –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞:")
            return STATE_PLAN
        await update.message.reply_text("4/4. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–Ω–∏–º–∫–∏/—Ñ–∞–π–ª—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –¥–æ 40 –ú–±)üìé –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª")
        return STATE_FILES

# Fallback
async def show_menu_on_unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=MAIN_KB)

# Error handler
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    log.exception("Unhandled error", exc_info=context.error)
    try:
        if isinstance(update, Update) and update.effective_chat:
            await context.bot.send_message(update.effective_chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    except Exception:
        pass

# post_init
async def post_init(application):
    await application.bot.set_my_commands([
        BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("fill", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand("new", "–ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"),
        BotCommand("me", "–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ"),
        BotCommand("list", "–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∑–∞—è–≤–æ–∫"),
        BotCommand("set_name", "–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û"),
        BotCommand("set_phone", "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"),
        BotCommand("set_workplace", "–ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã"),
        BotCommand("cancel", "–û—Ç–º–µ–Ω–∞"),
    ])
    await application.bot.set_my_short_description("–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–æ–≤-—Ö–∏—Ä—É—Ä–≥–æ–≤. "
            "–û–Ω –ø–æ–º–æ–∂–µ—Ç, –µ—Å–ª–∏ –í—ã –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –∏–º–ø–ª–∞–Ω—Ç–∞—Ü–∏–∏, –≤ –ø–µ—Ä–≤–æ–º –∏ –≤—Ç–æ—Ä–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–∞ –ö–¢ —É–≤–∏–¥–µ–ª–∏ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –≤ –ø–∞–∑—É—Ö–∞—Ö, "
            "–Ω–∞–ª–∏—á–∏–µ –∏–Ω–æ—Ä–æ–¥–Ω—ã—Ö —Ç–µ–ª –∏–ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ç–æ—Ä—ã–µ –í–∞—Å —Å–º—É—â–∞—é—Ç. –í –∞–Ω–∫–µ—Ç–µ –í–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å: –∂–∞–ª–æ–±—ã, –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–º–Ω–µ–∑ –ø–∞—Ü–∏–µ–Ω—Ç–∞, "
            "–ø–ª–∞–Ω–∏—Ä—É–µ–º—É—é —Å –í–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã —Ä–∞–±–æ—Ç—É, –∞ —Ç–∞–∫ –∂–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ö–¢ —Å–∫–∞–Ω—ã –≤ –∫–æ—Ä–æ–Ω–∞—Ä–Ω–æ–π –∏ —Å–∞–≥–∏—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤–∏–¥–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è üìë\n\n")
    await application.bot.set_my_description("–ù–∞–∂–º–∏—Ç–µ ""–°—Ç–∞—Ä—Ç"" –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –õ–û–†-–≤—Ä–∞—á–æ–ºüßëüèª‚Äç‚öïÔ∏è")

# Application
def build_application():
    request = HTTPXRequest(connect_timeout=10.0, read_timeout=120.0, write_timeout=120.0, pool_timeout=10.0)
    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .request(request)
        .post_init(post_init)
        .build()
    )
    app.add_error_handler(on_error)

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("me", cmd_me))
    app.add_handler(CommandHandler("list", cmd_list))

    reg_conv = ConversationHandler(
        entry_points=[
            CommandHandler("fill", reg_start),
            MessageHandler(filters.Regex(BTN_FILL_PROFILE_RE), reg_start),
        ],
        states={
            STATE_REG_NAME:  [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_name)],
            STATE_REG_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_phone)],
            STATE_REG_WORK:  [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_work)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(reg_conv)

    consult_conv = ConversationHandler(
        entry_points=[
            CommandHandler("new", new_start),
            MessageHandler(filters.Regex(BTN_NEW_CONSULT_RE), new_start),
        ],
        states={
            STATE_COMPLAINTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, new_complaints)],
            STATE_HISTORY:    [MessageHandler(filters.TEXT & ~filters.COMMAND, new_history)],
            STATE_PLAN:       [MessageHandler(filters.TEXT & ~filters.COMMAND, new_plan)],
            STATE_FILES: [
                MessageHandler(filters.PHOTO | filters.Document.ALL, new_files),
                MessageHandler(filters.Regex("^–ì–æ—Ç–æ–≤–æ$"), new_done),
            ],
            STATE_CONFIRM: [
                MessageHandler(filters.Regex("^‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å$"), new_confirm),
                MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∞$"), new_confirm),
                MessageHandler(filters.Regex("^üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ$"), new_confirm),
                MessageHandler(filters.Regex("^‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å$"), new_confirm),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(consult_conv)

    app.add_handler(MessageHandler(filters.Regex(BTN_MY_DATA_RE), cmd_me))

    app.add_handler(CommandHandler("set_name", set_name))
    app.add_handler(CommandHandler("set_phone", set_phone))
    app.add_handler(CommandHandler("set_workplace", set_workplace))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_profile_edit, block=False), group=0)
    app.add_handler(MessageHandler(filters.COMMAND, cancel_edit_on_any_command, block=False), group=0)

    app.add_handler(CallbackQueryHandler(cb_view_consult, pattern=r"^view_consult:\d+$"))

    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, show_menu_on_unknown))
    return app

# MAIN
def main():
    asyncio.run(db.init_db())
    app = build_application()
    log.info("–ó–∞–ø—É—Å–∫ long polling...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
